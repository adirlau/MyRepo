---
- hosts: all
  become: yes

  vars_files:
    - vars.yml

  pre_tasks:
    - name: ensure apt cache is up to date
      apt: update_cache=yes
    - name: "Install packages"
      apt: name={{item}}
      with_items:
          - python-minimal
          - software-properties-common
          - libpq-dev
          - python-psycopg2
          - postgresql

    - name: "Install Python packages"
      pip: name={{ item }}
      with_items:
        - psycopg2-binary

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: Configure PostgreSQL. Set listen_addresses.
      lineinfile: dest=/etc/postgresql/10/main/postgresql.conf
        regexp="listen_addresses =" line="listen_addresses = '*'" state=present
      notify: restart postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/10/main/pg_hba.conf"
        contype: host
        databases: all
        address: "0.0.0.0/0"
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: "{{ db_user }}"

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: "{{ db_user }}"

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: Create table used by webapp
      become: true
      become_user: postgres
      shell: psql -d {{ db_name }} -U {{ db_user }} -c "CREATE TABLE IF NOT EXISTS phonebook();"

  handlers:
    - name: restart postgres
      service:
        name: postgresql
        state: restarted
